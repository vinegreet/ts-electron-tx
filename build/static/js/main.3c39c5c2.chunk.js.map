{"version":3,"sources":["models/index.ts","context/DataContext.ts","context/dataReducer.ts","context/DataState.tsx","models/getTxRequestUrl.ts","components/Form/Form.tsx","helpers/dateTime.ts","helpers/formatAmount.ts","helpers/formatConfirmations.ts","components/TransactionsTable/TransactionRow.tsx","components/TransactionsTable/TransactionsTable.tsx","components/App/App.tsx","index.tsx"],"names":["initialState","txSuccess","txErrorMessage","transactions","getTransactions","DataContext","createContext","actionTypes","reducer","state","action","type","payload","requestStatus","DataState","children","useReducer","dataReducer","dispatch","valueState","status","data","message","result","Provider","value","defaultTxParams","module","startBlock","endBlock","sort","getTxRequestUrl","address","apiKey","paramsUrl","Form","useState","setAddress","setApiKey","useContext","isButtonDisabled","className","placeholder","onChange","e","target","onClick","a","fetch","response","json","console","error","disabled","dateTime","locale","seconds","Number","Date","toLocaleString","formatAmount","fractionDigits","amount","multi","roundedValue","Math","round","minimumFractionDigits","maximumFractionDigits","formatConfirmations","enoughNumber","convertedValue","isEnough","TransactionRow","transaction","timeStamp","from","to","confirmations","hash","title","TransactionsTable","transactionRows","map","tx","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c39c5c2.chunk.js","sourcesContent":["import { IDataStateFunctions } from './IData';\n\nexport const host = 'https://api.etherscan.io';\nexport const apiEndpoint = '/api';\n\nexport const initialState: IDataStateFunctions = {\n  txSuccess: false,\n  txErrorMessage: '',\n  transactions: [],\n  getTransactions() {},\n};\n","import { createContext } from 'react';\nimport { initialState } from '../models';\nimport { IDataStateFunctions } from '../models/IData';\n\nconst DataContext = createContext<IDataStateFunctions>(initialState);\n\nexport default DataContext;\n","import { IDataState } from '../models/IData';\n\nexport interface IAction {\n  type: string\n  payload: any\n}\n\nexport const actionTypes = {\n  TRANSACTIONS_SUCCESS: 'TRANSACTIONS_SUCCESS',\n  TRANSACTIONS_FAILED: 'TRANSACTIONS_FAILED',\n};\n\nconst reducer = (state: IDataState, action: IAction) => {\n  switch(action.type) {\n    case actionTypes.TRANSACTIONS_SUCCESS:\n      return {\n        ...state,\n        transactions: action.payload,\n        txSuccess: true,\n        txErrorMessage: '',\n      }\n\n    case actionTypes.TRANSACTIONS_FAILED:\n      return {\n        ...state,\n        transactions: [],\n        txSuccess: false,\n        txErrorMessage: action.payload,\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React, { useReducer } from 'react';\nimport DataContext from './DataContext';\nimport dataReducer, { actionTypes } from './dataReducer';\nimport { IApiTxData, IDataStateFunctions } from '../models/IData';\nimport { initialState } from '../models';\n\nexport const requestStatus = {\n  success: '1',\n  failure: '0',\n};\n\nconst DataState: React.FC = ({ children }) => {\n  const [ state, dispatch ] = useReducer(dataReducer, initialState);\n\n  const getTransactions = (status: string, data: IApiTxData): void => {\n    const { message, result } = data;\n\n    if (status === requestStatus.success) {\n      dispatch({\n        type: actionTypes.TRANSACTIONS_SUCCESS,\n        payload: result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.TRANSACTIONS_FAILED,\n        payload: message === 'NOTOK'\n          ? result\n          : message ?? 'Something went wrong, please check your connection, or try again later.',\n      });\n    }\n  }\n\n  const valueState: IDataStateFunctions = {\n    ...state,\n    getTransactions,\n  };\n\n  return (\n    <DataContext.Provider value={valueState}>\n      {children}\n    </DataContext.Provider>\n  );\n}\n\nexport default DataState;\n","import { apiEndpoint, host } from '.';\nimport { IDefaultTxRequestParams, IGetUrlParams } from './IData';\n\nexport type GetTxRequestUrl = (params: IGetUrlParams) => string;\n\nexport const defaultTxParams: IDefaultTxRequestParams = {\n  module: 'account',\n  action: 'txlist',\n  startBlock: 0,\n  endBlock: 99999999,\n  sort: 'asc',\n};\n\nexport const getTxRequestUrl: GetTxRequestUrl = ({\n  module,\n  action,\n  address,\n  startBlock,\n  endBlock,\n  sort,\n  apiKey,\n}): string => {\n  const paramsUrl = `?module=${module}&action=${action}&address=${address}&startblock=${startBlock}&endblock=${endBlock}&sort=${sort}&apikey=${apiKey}`;\n  return `${host}${apiEndpoint}${paramsUrl}`;\n};\n","import React, { useContext, useState } from 'react';\nimport DataContext from '../../context/DataContext';\nimport { requestStatus } from '../../context/DataState';\nimport { defaultTxParams, getTxRequestUrl } from '../../models/getTxRequestUrl';\nimport { IApiTxData } from '../../models/IData';\n\nimport './form.css';\n\nconst Form: React.FC = () => {\n  const [ address, setAddress ] = useState('0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a');\n  const [ apiKey, setApiKey ] = useState('');\n  const { getTransactions } = useContext(DataContext);\n  const isButtonDisabled = address === '' || apiKey === '';\n\n  const handleButtonClick = (): void => {\n    (async () => {\n      try {\n        const response = await fetch(getTxRequestUrl({ ...defaultTxParams, address, apiKey }));\n        const data: IApiTxData = await response.json();\n        getTransactions(data.status, data);\n      } catch (err) {\n        getTransactions(requestStatus.failure);\n        console.error(err);\n      }\n    })();\n  }\n\n  return (\n    <div className=\"tx_form\">\n      <label className=\"input-label\">Ether address (mandatory)</label>\n      <input\n        className=\"input tx_address\"\n        type=\"text\"\n        placeholder=\"Ether address\"\n        onChange={(e) => setAddress(e.target.value)}\n        value={address}\n      />\n      <label className=\"input-label\">Your API key (mandatory)</label>\n      <input\n        className=\"input tx_api-key\"\n        type=\"text\"\n        placeholder=\"Your API key\"\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n      <button\n        className=\"button tx_get-transactions\"\n        onClick={handleButtonClick}\n        disabled={isButtonDisabled}\n      >\n        Get transactions\n      </button>\n    </div>\n  )\n};\n\nexport default Form;\n","const dateTime = (value: number | string, locale: string = 'heb-IL'): string => {\n  const seconds = Number(value) * 1000;\n  return new Date(seconds).toLocaleString(locale);\n}\n\nexport default dateTime;\n","const formatAmount = (value: number | string, fractionDigits: number = 8): string => {\n  const amount = Number(value) / 1e18;\n  const multi = 10 ** fractionDigits;\n  const roundedValue = Math.round(amount * multi) / multi;\n\n  return roundedValue.toLocaleString('en', {\n    minimumFractionDigits: fractionDigits,\n    maximumFractionDigits: fractionDigits,\n  });\n}\n\nexport default formatAmount;\n","const formatConfirmations = (value: number | string, enoughNumber: number = 15): string => {\n  const convertedValue = Number(value);\n  const isEnough = (convertedValue / enoughNumber) > 1;\n\n  return isEnough ? `${enoughNumber}/${enoughNumber}` : `${convertedValue}/${enoughNumber}`;\n}\n\nexport default formatConfirmations;\n","import React from 'react';\nimport dateTime from '../../helpers/dateTime';\nimport formatAmount from '../../helpers/formatAmount';\nimport formatConfirmations from '../../helpers/formatConfirmations';\nimport { IDataTransaction } from '../../models/IData';\n\ninterface Props {\n  transaction: IDataTransaction\n}\n\nconst TransactionRow: React.FC<Props> = ({\n  transaction: {\n    timeStamp,\n    from,\n    to,\n    value,\n    confirmations,\n    hash,\n  },\n}) => {\n  return (\n    <div className=\"tx_table-row\" key={hash}>\n      <div className=\"tx_table-cell table-column_timestamp\" title={dateTime(timeStamp)}>\n        {dateTime(timeStamp)}\n      </div>\n      <div className=\"tx_table-cell table-column_from\" title={from}>{from}</div>\n      <div className=\"tx_table-cell table-column_to\" title={to}>{to}</div>\n      <div className=\"tx_table-cell table-column_amount\" title={formatAmount(value)}>\n        {formatAmount(value)}\n      </div>\n      <div className=\"tx_table-cell table-column_confirmations\" title={formatConfirmations(confirmations)}>\n        {formatConfirmations(confirmations)}\n      </div>\n      <div className=\"tx_table-cell table-column_hash\" title={hash}>{hash}</div>\n    </div>\n  );\n}\n\nexport default TransactionRow;\n","import React, { useContext } from 'react';\nimport DataContext from '../../context/DataContext';\nimport TransactionRow from './TransactionRow';\n\nimport './transactionsTable.css';\n\nconst TransactionsTable: React.FC = () => {\n  const { transactions } = useContext(DataContext);\n\n  const transactionRows = transactions.map((tx) => <TransactionRow transaction={tx} key={tx.hash} />);\n\n  return (\n    <div className=\"tx_table\">\n      <div className=\"tx_table-row table-header\">\n        <div className=\"table-header_cell table-column_timestamp\">Timestamp</div>\n        <div className=\"table-header_cell table-column_from\">From</div>\n        <div className=\"table-header_cell table-column_to\">To</div>\n        <div className=\"table-header_cell table-column_amount\">Amount</div>\n        <div className=\"table-header_cell table-column_confirmations\">Confirmations</div>\n        <div className=\"table-header_cell table-column_hash\">Hash</div>\n      </div>\n      {transactionRows}\n    </div>\n  )\n};\n\nexport default TransactionsTable;\n","import React, { useContext } from 'react';\nimport DataContext from '../../context/DataContext';\nimport Form from '../Form';\nimport TransactionsTable from '../TransactionsTable';\n\nimport './app.css';\n\nconst App: React.FC = () => {\n  const { txSuccess, txErrorMessage } = useContext(DataContext);\n\n  return (\n    <div className=\"app\">\n      <div className=\"tx_container\">\n        <Form />\n        {\n          txSuccess\n            ? <TransactionsTable />\n            : <div className=\"tx_error-message\">{txErrorMessage}</div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport DataState from './context/DataState';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataState>\n      <App />\n    </DataState>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}